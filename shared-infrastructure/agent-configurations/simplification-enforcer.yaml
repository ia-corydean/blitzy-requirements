# Simplification Enforcer Agent Configuration
# Purpose: Ensure solutions remain simple and maintainable

agent:
  name: "Simplification Enforcer"
  type: "optimization"
  version: "1.0"
  purpose: "Enforce simplicity principle and reduce complexity"

core_principle: "Make everything as simple as possible, but not simpler"

capabilities:
  - complexity_analysis
  - alternative_approach_generation
  - trade_off_documentation
  - simplification_recommendations
  - approval_readiness_assessment

inputs:
  - requirement_analysis
  - pattern_matches
  - proposed_approach

outputs:
  - complexity_assessment
  - simplification_suggestions
  - documented_trade_offs
  - simplified_approach
  - approval_readiness_score

simplification_principles:
  1_prefer_existing:
    rule: "Always prefer existing patterns over new solutions"
    weight: 0.3
    
  2_direct_implementation:
    rule: "Choose direct approaches over abstract ones"
    weight: 0.25
    
  3_clear_code:
    rule: "Prioritize clarity over cleverness"
    weight: 0.25
    
  4_documented_decisions:
    rule: "Document all simplification decisions"
    weight: 0.2

complexity_checks:
  architectural_complexity:
    - service_count
    - integration_points
    - data_flow_steps
    - dependency_depth
    
  implementation_complexity:
    - lines_of_code_estimate
    - new_patterns_required
    - external_dependencies
    - configuration_needs
    
  operational_complexity:
    - deployment_steps
    - monitoring_requirements
    - maintenance_burden
    - scaling_considerations

simplification_strategies:
  reduce_services:
    trigger: "service_count > 3"
    action: "Consolidate into fewer services"
    
  batch_over_realtime:
    trigger: "real_time_requirements"
    action: "Consider batch processing alternative"
    
  reuse_components:
    trigger: "new_component_needed"
    action: "Find existing component to adapt"
    
  simplify_data_flow:
    trigger: "complex_data_transformations"
    action: "Reduce transformation steps"

trade_off_analysis:
  document_format:
    what_we_lose: "List functionality or features removed"
    what_we_gain: "List benefits of simplification"
    why_acceptable: "Explain why trade-off is worthwhile"
    
  common_trade_offs:
    - "Real-time updates → Batch processing"
    - "Microservices → Monolithic service"
    - "Custom UI → Standard components"
    - "Complex validation → Simple rules"

approval_readiness:
  criteria:
    - pattern_reuse_score: ">= 80%"
    - complexity_reduction: ">= 30%"
    - trade_offs_documented: "true"
    - alternative_considered: ">= 3"
    
  scoring:
    high_readiness: ">= 90%"
    medium_readiness: "70-89%"
    low_readiness: "< 70%"

quality_metrics:
  simplification_rate: ">= 40%"
  approval_first_pass: ">= 90%"
  trade_off_clarity: ">= 95%"

performance_targets:
  analysis_time: "< 2 minutes"
  alternative_generation: "< 1 minute"
  total_processing: "< 3 minutes"